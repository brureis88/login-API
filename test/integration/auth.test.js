require('../helpers/testHelper');

describe('üîê Testes de Integra√ß√£o - API de Autentica√ß√£o', () => {

  describe('POST /login', () => {

    it('‚úÖ Deve fazer login com credenciais v√°lidas', async () => {
      const response = await request
        .post('/login')
        .send(testData.validLoginData)
        .expect(200);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Login realizado com sucesso!');
    });

    it('‚ùå Deve rejeitar login com usu√°rio inexistente', async () => {
      const response = await request
        .post('/login')
        .send({
          username: 'usuario_inexistente',
          password: 'senha123'
        })
        .expect(401);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio ou senha inv√°lidos.');
    });

    it('‚ùå Deve rejeitar login com senha incorreta', async () => {
      const response = await request
        .post('/login')
        .send(testData.invalidLoginData)
        .expect(401);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio ou senha inv√°lidos.');
    });

    it('‚ùå Deve rejeitar requisi√ß√£o com campos obrigat√≥rios ausentes', async () => {
      //Login com sucesso
      await request
        .post('/login')
        .send(testData.validLoginData)
        .expect(200);

      //Login com campos obrigat√≥rios ausentes
      const response = await request
        .post('/login')
        .send({ username: 'usuario1' })
        .expect(401);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio ou senha inv√°lidos.');
    });

    it('üö´ Deve bloquear usu√°rio ap√≥s 3 tentativas inv√°lidas', async () => {
      //Login com sucesso
      await request
        .post('/login')
        .send(testData.validLoginData)
        .expect(200);

      // Primeira tentativa inv√°lida
      await request
        .post('/login')
        .send(testData.invalidLoginData)
        .expect(401);

      // Segunda tentativa inv√°lida
      await request
        .post('/login')
        .send(testData.invalidLoginData)
        .expect(401);

      // Terceira tentativa inv√°lida - deve bloquear
      const response = await request
        .post('/login')
        .send(testData.invalidLoginData)
        .expect(423);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio bloqueado por tentativas inv√°lidas.');
    });

    it('üö´ Deve rejeitar login de usu√°rio bloqueado', async () => {
      const response = await request
        .post('/login')
        .send(testData.validLoginData)
        .expect(423);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio bloqueado por tentativas inv√°lidas.');
    });
  });

  describe('POST /solicitar-redefinicao', () => {

    it('‚úÖ Deve solicitar redefini√ß√£o para usu√°rio v√°lido', async () => {
      const response = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario1' })
        .expect(200);

      expect(response.body).to.have.property('mensagem');
      expect(response.body).to.have.property('email');
      expect(response.body).to.have.property('codigo');
      expect(response.body.mensagem).to.equal('C√≥digo de redefini√ß√£o enviado para o e-mail cadastrado.');
    });

    it('‚ùå Deve rejeitar solicita√ß√£o para usu√°rio inexistente', async () => {
      const response = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario_inexistente' })
        .expect(404);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio n√£o encontrado.');
    });

    it('‚ùå Deve rejeitar requisi√ß√£o sem username', async () => {
      const response = await request
        .post('/solicitar-redefinicao')
        .send({})
        .expect(404);

      expect(response.body).to.have.property('mensagem');
    });
  });

  describe('POST /validar-codigo', () => {
    let codigoValido;

    before(async () => {
      // Solicitar c√≥digo para usar nos testes
      const response = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario1' });

      codigoValido = response.body.codigo;
    });

    it('‚úÖ Deve validar c√≥digo correto', async () => {
      const response = await request
        .post('/validar-codigo')
        .send({
          username: 'usuario1',
          codigo: codigoValido
        })
        .expect(200);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('C√≥digo v√°lido. Voc√™ pode redefinir sua senha.');
    });

    it('‚ùå Deve rejeitar c√≥digo incorreto', async () => {
      const response = await request
        .post('/validar-codigo')
        .send({
          username: 'usuario1',
          codigo: '000000'
        })
        .expect(400);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Este c√≥digo j√° foi utilizado.');
    });

    it('‚ùå Deve rejeitar c√≥digo para usu√°rio sem solicita√ß√£o', async () => {
      const response = await request
        .post('/validar-codigo')
        .send({
          username: 'usuario_inexistente',
          codigo: '123456'
        })
        .expect(400);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Nenhum c√≥digo de redefini√ß√£o solicitado para este usu√°rio.');
    });

    it('‚ùå Deve rejeitar c√≥digo j√° utilizado', async () => {
      // Tentar usar o mesmo c√≥digo novamente
      const response = await request
        .post('/validar-codigo')
        .send({
          username: 'usuario1',
          codigo: codigoValido
        })
        .expect(400);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Este c√≥digo j√° foi utilizado.');
    });
  });

  describe('POST /redefinir-senha', () => {
    let codigoValido;

    before(async () => {
      // Solicitar novo c√≥digo para usar nos testes
      const response = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario1' });

      codigoValido = response.body.codigo;

      // Validar o c√≥digo primeiro
      await request
        .post('/validar-codigo')
        .send({
          username: 'usuario1',
          codigo: codigoValido
        });
    });

    it('‚úÖ Deve redefinir senha com c√≥digo v√°lido', async () => {
      const response = await request
        .post('/redefinir-senha')
        .send({
          username: 'usuario1',
          codigo: codigoValido,
          novaSenha: 'novaSenha123'
        })
        .expect(200);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Senha redefinida com sucesso!');
    });

    it('‚ùå Deve rejeitar redefini√ß√£o com c√≥digo inv√°lido', async () => {
      const response = await request
        .post('/redefinir-senha')
        .send({
          username: 'usuario1',
          codigo: '000000',
          novaSenha: 'novaSenha123'
        })
        .expect(400);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('C√≥digo inv√°lido ou n√£o validado.');
    });

    it('‚ùå Deve rejeitar redefini√ß√£o para usu√°rio inexistente', async () => {
      const response = await request
        .post('/redefinir-senha')
        .send({
          username: 'usuario_inexistente',
          codigo: '123456',
          novaSenha: 'novaSenha123'
        })
        .expect(400);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('C√≥digo inv√°lido ou n√£o validado.');
    });

    it('‚ùå Deve rejeitar redefini√ß√£o sem c√≥digo validado', async () => {
      // Solicitar novo c√≥digo sem validar
      const responseSolicitar = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario1' });

      const codigoNaoValidado = responseSolicitar.body.codigo;

      const response = await request
        .post('/redefinir-senha')
        .send({
          username: 'usuario1',
          codigo: codigoNaoValidado,
          novaSenha: 'novaSenha123'
        })
        .expect(400);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('C√≥digo inv√°lido ou n√£o validado.');
    });
  });

  describe('POST /esqueci-senha (endpoint legado)', () => {

    it('‚úÖ Deve funcionar como alias para solicitar-redefinicao', async () => {
      const response = await request
        .post('/esqueci-senha')
        .send({ username: 'usuario1' })
        .expect(200);

      expect(response.body).to.have.property('mensagem');
      expect(response.body).to.have.property('email');
      expect(response.body).to.have.property('codigo');
      expect(response.body.mensagem).to.equal('C√≥digo de redefini√ß√£o enviado para o e-mail cadastrado.');
    });

    it('‚ùå Deve rejeitar usu√°rio inexistente no endpoint legado', async () => {
      const response = await request
        .post('/esqueci-senha')
        .send({ username: 'usuario_inexistente' })
        .expect(404);

      expect(response.body).to.have.property('mensagem');
      expect(response.body.mensagem).to.equal('Usu√°rio n√£o encontrado.');
    });
  });

  describe('üîç Testes de Regress√£o - Fluxo Completo', () => {

    it('üîÑ Deve permitir login ap√≥s redefini√ß√£o de senha', async () => {
      // 1. Solicitar redefini√ß√£o
      const responseSolicitar = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario1' });

      const codigo = responseSolicitar.body.codigo;

      // 2. Validar c√≥digo
      await request
        .post('/validar-codigo')
        .send({
          username: 'usuario1',
          codigo: codigo
        });

      // 3. Redefinir senha
      await request
        .post('/redefinir-senha')
        .send({
          username: 'usuario1',
          codigo: codigo,
          novaSenha: 'senhaNova123'
        });

      // 4. Tentar login com nova senha
      const responseLogin = await request
        .post('/login')
        .send({
          username: 'usuario1',
          password: 'senhaNova123'
        })
        .expect(200);

      expect(responseLogin.body.mensagem).to.equal('Login realizado com sucesso!');
    });

    it('üîÑ Deve desbloquear usu√°rio ap√≥s redefini√ß√£o de senha', async () => {
      // 1. Bloquear usu√°rio com tentativas inv√°lidas
      for (let i = 0; i < 3; i++) {
        await request
          .post('/login')
          .send({
            username: 'usuario1',
            password: 'senha_errada'
          });
      }

      // 2. Verificar que est√° bloqueado
      await request
        .post('/login')
        .send({
          username: 'usuario1',
          password: 'senhaNova123'
        })
        .expect(423);

      // 3. Solicitar redefini√ß√£o
      const responseSolicitar = await request
        .post('/solicitar-redefinicao')
        .send({ username: 'usuario1' });

      const codigo = responseSolicitar.body.codigo;

      // 4. Validar c√≥digo
      await request
        .post('/validar-codigo')
        .send({
          username: 'usuario1',
          codigo: codigo
        });

      // 5. Redefinir senha (deve desbloquear)
      await request
        .post('/redefinir-senha')
        .send({
          username: 'usuario1',
          codigo: codigo,
          novaSenha: 'senhaDesbloqueada123'
        });

      // 6. Verificar que pode fazer login
      const responseLogin = await request
        .post('/login')
        .send({
          username: 'usuario1',
          password: 'senhaDesbloqueada123'
        })
        .expect(200);

      expect(responseLogin.body.mensagem).to.equal('Login realizado com sucesso!');
    });
  });

  after(() => {
    cleanupTestData();
  });
}); 